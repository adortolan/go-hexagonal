// Code generated by MockGen. DO NOT EDIT.
// Source: aplicacao/produto.go

// Package mock_aplicacao is a generated GoMock package.
package mock_aplicacao

import (
	reflect "reflect"

	aplicacao "github.com/adortolan/go-hexagonal/aplicacao"
	gomock "github.com/golang/mock/gomock"
)

// MockProdutoInterface is a mock of ProdutoInterface interface.
type MockProdutoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProdutoInterfaceMockRecorder
}

// MockProdutoInterfaceMockRecorder is the mock recorder for MockProdutoInterface.
type MockProdutoInterfaceMockRecorder struct {
	mock *MockProdutoInterface
}

// NewMockProdutoInterface creates a new mock instance.
func NewMockProdutoInterface(ctrl *gomock.Controller) *MockProdutoInterface {
	mock := &MockProdutoInterface{ctrl: ctrl}
	mock.recorder = &MockProdutoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProdutoInterface) EXPECT() *MockProdutoInterfaceMockRecorder {
	return m.recorder
}

// EValido mocks base method.
func (m *MockProdutoInterface) EValido() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EValido")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EValido indicates an expected call of EValido.
func (mr *MockProdutoInterfaceMockRecorder) EValido() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EValido", reflect.TypeOf((*MockProdutoInterface)(nil).EValido))
}

// GetCodigo mocks base method.
func (m *MockProdutoInterface) GetCodigo() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCodigo")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCodigo indicates an expected call of GetCodigo.
func (mr *MockProdutoInterfaceMockRecorder) GetCodigo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCodigo", reflect.TypeOf((*MockProdutoInterface)(nil).GetCodigo))
}

// GetNome mocks base method.
func (m *MockProdutoInterface) GetNome() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNome")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNome indicates an expected call of GetNome.
func (mr *MockProdutoInterfaceMockRecorder) GetNome() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNome", reflect.TypeOf((*MockProdutoInterface)(nil).GetNome))
}

// MockProdutoServicoInterface is a mock of ProdutoServicoInterface interface.
type MockProdutoServicoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProdutoServicoInterfaceMockRecorder
}

// MockProdutoServicoInterfaceMockRecorder is the mock recorder for MockProdutoServicoInterface.
type MockProdutoServicoInterfaceMockRecorder struct {
	mock *MockProdutoServicoInterface
}

// NewMockProdutoServicoInterface creates a new mock instance.
func NewMockProdutoServicoInterface(ctrl *gomock.Controller) *MockProdutoServicoInterface {
	mock := &MockProdutoServicoInterface{ctrl: ctrl}
	mock.recorder = &MockProdutoServicoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProdutoServicoInterface) EXPECT() *MockProdutoServicoInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockProdutoServicoInterface) Get(codigo string) (aplicacao.ProdutoInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", codigo)
	ret0, _ := ret[0].(aplicacao.ProdutoInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProdutoServicoInterfaceMockRecorder) Get(codigo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProdutoServicoInterface)(nil).Get), codigo)
}

// NovoProduto mocks base method.
func (m *MockProdutoServicoInterface) NovoProduto(nome string) (aplicacao.ProdutoInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NovoProduto", nome)
	ret0, _ := ret[0].(aplicacao.ProdutoInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NovoProduto indicates an expected call of NovoProduto.
func (mr *MockProdutoServicoInterfaceMockRecorder) NovoProduto(nome interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NovoProduto", reflect.TypeOf((*MockProdutoServicoInterface)(nil).NovoProduto), nome)
}

// MockProdutoLeitor is a mock of ProdutoLeitor interface.
type MockProdutoLeitor struct {
	ctrl     *gomock.Controller
	recorder *MockProdutoLeitorMockRecorder
}

// MockProdutoLeitorMockRecorder is the mock recorder for MockProdutoLeitor.
type MockProdutoLeitorMockRecorder struct {
	mock *MockProdutoLeitor
}

// NewMockProdutoLeitor creates a new mock instance.
func NewMockProdutoLeitor(ctrl *gomock.Controller) *MockProdutoLeitor {
	mock := &MockProdutoLeitor{ctrl: ctrl}
	mock.recorder = &MockProdutoLeitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProdutoLeitor) EXPECT() *MockProdutoLeitorMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockProdutoLeitor) Get(codigo string) (aplicacao.ProdutoInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", codigo)
	ret0, _ := ret[0].(aplicacao.ProdutoInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProdutoLeitorMockRecorder) Get(codigo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProdutoLeitor)(nil).Get), codigo)
}

// MockProdutoGrava is a mock of ProdutoGrava interface.
type MockProdutoGrava struct {
	ctrl     *gomock.Controller
	recorder *MockProdutoGravaMockRecorder
}

// MockProdutoGravaMockRecorder is the mock recorder for MockProdutoGrava.
type MockProdutoGravaMockRecorder struct {
	mock *MockProdutoGrava
}

// NewMockProdutoGrava creates a new mock instance.
func NewMockProdutoGrava(ctrl *gomock.Controller) *MockProdutoGrava {
	mock := &MockProdutoGrava{ctrl: ctrl}
	mock.recorder = &MockProdutoGravaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProdutoGrava) EXPECT() *MockProdutoGravaMockRecorder {
	return m.recorder
}

// Gravar mocks base method.
func (m *MockProdutoGrava) Gravar(Produto aplicacao.ProdutoInterface) (aplicacao.ProdutoInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gravar", Produto)
	ret0, _ := ret[0].(aplicacao.ProdutoInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gravar indicates an expected call of Gravar.
func (mr *MockProdutoGravaMockRecorder) Gravar(Produto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gravar", reflect.TypeOf((*MockProdutoGrava)(nil).Gravar), Produto)
}

// MockProdutoPersistenciaInterface is a mock of ProdutoPersistenciaInterface interface.
type MockProdutoPersistenciaInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProdutoPersistenciaInterfaceMockRecorder
}

// MockProdutoPersistenciaInterfaceMockRecorder is the mock recorder for MockProdutoPersistenciaInterface.
type MockProdutoPersistenciaInterfaceMockRecorder struct {
	mock *MockProdutoPersistenciaInterface
}

// NewMockProdutoPersistenciaInterface creates a new mock instance.
func NewMockProdutoPersistenciaInterface(ctrl *gomock.Controller) *MockProdutoPersistenciaInterface {
	mock := &MockProdutoPersistenciaInterface{ctrl: ctrl}
	mock.recorder = &MockProdutoPersistenciaInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProdutoPersistenciaInterface) EXPECT() *MockProdutoPersistenciaInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockProdutoPersistenciaInterface) Get(codigo string) (aplicacao.ProdutoInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", codigo)
	ret0, _ := ret[0].(aplicacao.ProdutoInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProdutoPersistenciaInterfaceMockRecorder) Get(codigo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProdutoPersistenciaInterface)(nil).Get), codigo)
}

// Gravar mocks base method.
func (m *MockProdutoPersistenciaInterface) Gravar(Produto aplicacao.ProdutoInterface) (aplicacao.ProdutoInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gravar", Produto)
	ret0, _ := ret[0].(aplicacao.ProdutoInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gravar indicates an expected call of Gravar.
func (mr *MockProdutoPersistenciaInterfaceMockRecorder) Gravar(Produto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gravar", reflect.TypeOf((*MockProdutoPersistenciaInterface)(nil).Gravar), Produto)
}
